// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: clash/v1/service.proto

package clashv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogLevel int32

const (
	LogLevel_LOG_LEVEL_UNSPECIFIED LogLevel = 0
	LogLevel_LOG_LEVEL_DEBUG       LogLevel = 1
	LogLevel_LOG_LEVEL_INFO        LogLevel = 2
	LogLevel_LOG_LEVEL_WARN        LogLevel = 3
	LogLevel_LOG_LEVEL_ERROR       LogLevel = 4
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_UNSPECIFIED",
		1: "LOG_LEVEL_DEBUG",
		2: "LOG_LEVEL_INFO",
		3: "LOG_LEVEL_WARN",
		4: "LOG_LEVEL_ERROR",
	}
	LogLevel_value = map[string]int32{
		"LOG_LEVEL_UNSPECIFIED": 0,
		"LOG_LEVEL_DEBUG":       1,
		"LOG_LEVEL_INFO":        2,
		"LOG_LEVEL_WARN":        3,
		"LOG_LEVEL_ERROR":       4,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_clash_v1_service_proto_enumTypes[0].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_clash_v1_service_proto_enumTypes[0]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{0}
}

type Network int32

const (
	Network_NETWORK_UNSPECIFIED Network = 0
	Network_NETWORK_TCP         Network = 1
	Network_NETWORK_UDP         Network = 2
)

// Enum value maps for Network.
var (
	Network_name = map[int32]string{
		0: "NETWORK_UNSPECIFIED",
		1: "NETWORK_TCP",
		2: "NETWORK_UDP",
	}
	Network_value = map[string]int32{
		"NETWORK_UNSPECIFIED": 0,
		"NETWORK_TCP":         1,
		"NETWORK_UDP":         2,
	}
)

func (x Network) Enum() *Network {
	p := new(Network)
	*p = x
	return p
}

func (x Network) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Network) Descriptor() protoreflect.EnumDescriptor {
	return file_clash_v1_service_proto_enumTypes[1].Descriptor()
}

func (Network) Type() protoreflect.EnumType {
	return &file_clash_v1_service_proto_enumTypes[1]
}

func (x Network) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Network.Descriptor instead.
func (Network) EnumDescriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{1}
}

type ConnectionType int32

const (
	ConnectionType_CONNECTION_TYPE_UNSPECIFIED  ConnectionType = 0
	ConnectionType_CONNECTION_TYPE_HTTP         ConnectionType = 1
	ConnectionType_CONNECTION_TYPE_HTTP_CONNECT ConnectionType = 2
	ConnectionType_CONNECTION_TYPE_SOCKS4       ConnectionType = 3
	ConnectionType_CONNECTION_TYPE_SOCKS5       ConnectionType = 4
	ConnectionType_CONNECTION_TYPE_REDIR        ConnectionType = 5
	ConnectionType_CONNECTION_TYPE_TPROXY       ConnectionType = 6
	ConnectionType_CONNECTION_TYPE_TUNNEL       ConnectionType = 7
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "CONNECTION_TYPE_UNSPECIFIED",
		1: "CONNECTION_TYPE_HTTP",
		2: "CONNECTION_TYPE_HTTP_CONNECT",
		3: "CONNECTION_TYPE_SOCKS4",
		4: "CONNECTION_TYPE_SOCKS5",
		5: "CONNECTION_TYPE_REDIR",
		6: "CONNECTION_TYPE_TPROXY",
		7: "CONNECTION_TYPE_TUNNEL",
	}
	ConnectionType_value = map[string]int32{
		"CONNECTION_TYPE_UNSPECIFIED":  0,
		"CONNECTION_TYPE_HTTP":         1,
		"CONNECTION_TYPE_HTTP_CONNECT": 2,
		"CONNECTION_TYPE_SOCKS4":       3,
		"CONNECTION_TYPE_SOCKS5":       4,
		"CONNECTION_TYPE_REDIR":        5,
		"CONNECTION_TYPE_TPROXY":       6,
		"CONNECTION_TYPE_TUNNEL":       7,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_clash_v1_service_proto_enumTypes[2].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_clash_v1_service_proto_enumTypes[2]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{2}
}

type DNSMode int32

const (
	DNSMode_DNS_MODE_UNSPECIFIED DNSMode = 0
	DNSMode_DNS_MODE_NORMAL      DNSMode = 1
	DNSMode_DNS_MODE_FAKE_IP     DNSMode = 2
	DNSMode_DNS_MODE_MAPPING     DNSMode = 3
)

// Enum value maps for DNSMode.
var (
	DNSMode_name = map[int32]string{
		0: "DNS_MODE_UNSPECIFIED",
		1: "DNS_MODE_NORMAL",
		2: "DNS_MODE_FAKE_IP",
		3: "DNS_MODE_MAPPING",
	}
	DNSMode_value = map[string]int32{
		"DNS_MODE_UNSPECIFIED": 0,
		"DNS_MODE_NORMAL":      1,
		"DNS_MODE_FAKE_IP":     2,
		"DNS_MODE_MAPPING":     3,
	}
)

func (x DNSMode) Enum() *DNSMode {
	p := new(DNSMode)
	*p = x
	return p
}

func (x DNSMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNSMode) Descriptor() protoreflect.EnumDescriptor {
	return file_clash_v1_service_proto_enumTypes[3].Descriptor()
}

func (DNSMode) Type() protoreflect.EnumType {
	return &file_clash_v1_service_proto_enumTypes[3]
}

func (x DNSMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNSMode.Descriptor instead.
func (DNSMode) EnumDescriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{3}
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type SubscribeLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level LogLevel `protobuf:"varint,1,opt,name=level,proto3,enum=clash.v1.LogLevel" json:"level,omitempty"`
}

func (x *SubscribeLogsRequest) Reset() {
	*x = SubscribeLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLogsRequest) ProtoMessage() {}

func (x *SubscribeLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLogsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeLogsRequest) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeLogsRequest) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_LOG_LEVEL_UNSPECIFIED
}

type LogRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *LogRecord) Reset() {
	*x = LogRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRecord) ProtoMessage() {}

func (x *LogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRecord.ProtoReflect.Descriptor instead.
func (*LogRecord) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *LogRecord) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type Traffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Up   int64 `protobuf:"varint,1,opt,name=up,proto3" json:"up,omitempty"`
	Down int64 `protobuf:"varint,2,opt,name=down,proto3" json:"down,omitempty"`
}

func (x *Traffic) Reset() {
	*x = Traffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Traffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traffic) ProtoMessage() {}

func (x *Traffic) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traffic.ProtoReflect.Descriptor instead.
func (*Traffic) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *Traffic) GetUp() int64 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *Traffic) GetDown() int64 {
	if x != nil {
		return x.Down
	}
	return 0
}

type ListRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*ListRulesResponse_Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ListRulesResponse) Reset() {
	*x = ListRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRulesResponse) ProtoMessage() {}

func (x *ListRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRulesResponse.ProtoReflect.Descriptor instead.
func (*ListRulesResponse) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListRulesResponse) GetRules() []*ListRulesResponse_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ListInboundsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inbounds []*ListInboundsResponse_Inbound `protobuf:"bytes,1,rep,name=inbounds,proto3" json:"inbounds,omitempty"`
}

func (x *ListInboundsResponse) Reset() {
	*x = ListInboundsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInboundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboundsResponse) ProtoMessage() {}

func (x *ListInboundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboundsResponse.ProtoReflect.Descriptor instead.
func (*ListInboundsResponse) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListInboundsResponse) GetInbounds() []*ListInboundsResponse_Inbound {
	if x != nil {
		return x.Inbounds
	}
	return nil
}

type BatchUpdateInboundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inbounds []*BatchUpdateInboundsRequest_Inbound `protobuf:"bytes,1,rep,name=inbounds,proto3" json:"inbounds,omitempty"`
}

func (x *BatchUpdateInboundsRequest) Reset() {
	*x = BatchUpdateInboundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateInboundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateInboundsRequest) ProtoMessage() {}

func (x *BatchUpdateInboundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateInboundsRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateInboundsRequest) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *BatchUpdateInboundsRequest) GetInbounds() []*BatchUpdateInboundsRequest_Inbound {
	if x != nil {
		return x.Inbounds
	}
	return nil
}

type SubscribeConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Internal *durationpb.Duration `protobuf:"bytes,1,opt,name=internal,proto3" json:"internal,omitempty"`
}

func (x *SubscribeConnectionsRequest) Reset() {
	*x = SubscribeConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeConnectionsRequest) ProtoMessage() {}

func (x *SubscribeConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeConnectionsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *SubscribeConnectionsRequest) GetInternal() *durationpb.Duration {
	if x != nil {
		return x.Internal
	}
	return nil
}

type SubscribeConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadTotal int64                                      `protobuf:"varint,1,opt,name=download_total,json=downloadTotal,proto3" json:"download_total,omitempty"`
	UploadTotal   int64                                      `protobuf:"varint,2,opt,name=upload_total,json=uploadTotal,proto3" json:"upload_total,omitempty"`
	Connections   []*SubscribeConnectionsResponse_Connection `protobuf:"bytes,3,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *SubscribeConnectionsResponse) Reset() {
	*x = SubscribeConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeConnectionsResponse) ProtoMessage() {}

func (x *SubscribeConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeConnectionsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *SubscribeConnectionsResponse) GetDownloadTotal() int64 {
	if x != nil {
		return x.DownloadTotal
	}
	return 0
}

func (x *SubscribeConnectionsResponse) GetUploadTotal() int64 {
	if x != nil {
		return x.UploadTotal
	}
	return 0
}

func (x *SubscribeConnectionsResponse) GetConnections() []*SubscribeConnectionsResponse_Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type DeleteConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteConnectionRequest) Reset() {
	*x = DeleteConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectionRequest) ProtoMessage() {}

func (x *DeleteConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteConnectionRequest) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QueryDNSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *QueryDNSRequest) Reset() {
	*x = QueryDNSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDNSRequest) ProtoMessage() {}

func (x *QueryDNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDNSRequest.ProtoReflect.Descriptor instead.
func (*QueryDNSRequest) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *QueryDNSRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryDNSRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type QueryDNSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             int32                        `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Question           []*QueryDNSResponse_Question `protobuf:"bytes,2,rep,name=question,proto3" json:"question,omitempty"`
	Truncated          bool                         `protobuf:"varint,3,opt,name=truncated,proto3" json:"truncated,omitempty"`
	RecursionDesired   bool                         `protobuf:"varint,4,opt,name=recursion_desired,json=recursionDesired,proto3" json:"recursion_desired,omitempty"`
	RecursionAvailable bool                         `protobuf:"varint,5,opt,name=recursion_available,json=recursionAvailable,proto3" json:"recursion_available,omitempty"`
	AuthenticatedData  bool                         `protobuf:"varint,6,opt,name=authenticated_data,json=authenticatedData,proto3" json:"authenticated_data,omitempty"`
	CheckingDisabled   bool                         `protobuf:"varint,7,opt,name=checking_disabled,json=checkingDisabled,proto3" json:"checking_disabled,omitempty"`
	Answer             []*QueryDNSResponse_Answer   `protobuf:"bytes,8,rep,name=answer,proto3" json:"answer,omitempty"`
	Authority          []*QueryDNSResponse_Answer   `protobuf:"bytes,9,rep,name=authority,proto3" json:"authority,omitempty"`
}

func (x *QueryDNSResponse) Reset() {
	*x = QueryDNSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDNSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDNSResponse) ProtoMessage() {}

func (x *QueryDNSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDNSResponse.ProtoReflect.Descriptor instead.
func (*QueryDNSResponse) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *QueryDNSResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryDNSResponse) GetQuestion() []*QueryDNSResponse_Question {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *QueryDNSResponse) GetTruncated() bool {
	if x != nil {
		return x.Truncated
	}
	return false
}

func (x *QueryDNSResponse) GetRecursionDesired() bool {
	if x != nil {
		return x.RecursionDesired
	}
	return false
}

func (x *QueryDNSResponse) GetRecursionAvailable() bool {
	if x != nil {
		return x.RecursionAvailable
	}
	return false
}

func (x *QueryDNSResponse) GetAuthenticatedData() bool {
	if x != nil {
		return x.AuthenticatedData
	}
	return false
}

func (x *QueryDNSResponse) GetCheckingDisabled() bool {
	if x != nil {
		return x.CheckingDisabled
	}
	return false
}

func (x *QueryDNSResponse) GetAnswer() []*QueryDNSResponse_Answer {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *QueryDNSResponse) GetAuthority() []*QueryDNSResponse_Answer {
	if x != nil {
		return x.Authority
	}
	return nil
}

type ListRulesResponse_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Proxy   string `protobuf:"bytes,3,opt,name=proxy,proto3" json:"proxy,omitempty"`
}

func (x *ListRulesResponse_Rule) Reset() {
	*x = ListRulesResponse_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRulesResponse_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRulesResponse_Rule) ProtoMessage() {}

func (x *ListRulesResponse_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRulesResponse_Rule.ProtoReflect.Descriptor instead.
func (*ListRulesResponse_Rule) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListRulesResponse_Rule) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListRulesResponse_Rule) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *ListRulesResponse_Rule) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

type ListInboundsResponse_Inbound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	BindAddress string `protobuf:"bytes,2,opt,name=bind_address,json=bindAddress,proto3" json:"bind_address,omitempty"`
}

func (x *ListInboundsResponse_Inbound) Reset() {
	*x = ListInboundsResponse_Inbound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInboundsResponse_Inbound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInboundsResponse_Inbound) ProtoMessage() {}

func (x *ListInboundsResponse_Inbound) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInboundsResponse_Inbound.ProtoReflect.Descriptor instead.
func (*ListInboundsResponse_Inbound) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ListInboundsResponse_Inbound) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListInboundsResponse_Inbound) GetBindAddress() string {
	if x != nil {
		return x.BindAddress
	}
	return ""
}

type BatchUpdateInboundsRequest_Inbound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	BindAddress string `protobuf:"bytes,2,opt,name=bind_address,json=bindAddress,proto3" json:"bind_address,omitempty"`
}

func (x *BatchUpdateInboundsRequest_Inbound) Reset() {
	*x = BatchUpdateInboundsRequest_Inbound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateInboundsRequest_Inbound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateInboundsRequest_Inbound) ProtoMessage() {}

func (x *BatchUpdateInboundsRequest_Inbound) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateInboundsRequest_Inbound.ProtoReflect.Descriptor instead.
func (*BatchUpdateInboundsRequest_Inbound) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *BatchUpdateInboundsRequest_Inbound) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BatchUpdateInboundsRequest_Inbound) GetBindAddress() string {
	if x != nil {
		return x.BindAddress
	}
	return ""
}

type SubscribeConnectionsResponse_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network         string         `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Type            ConnectionType `protobuf:"varint,2,opt,name=type,proto3,enum=clash.v1.ConnectionType" json:"type,omitempty"`
	SourceIp        string         `protobuf:"bytes,3,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	DestinationIp   string         `protobuf:"bytes,4,opt,name=destination_ip,json=destinationIp,proto3" json:"destination_ip,omitempty"`
	SourcePort      int64          `protobuf:"varint,5,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	DestinationPort int64          `protobuf:"varint,6,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	Host            string         `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"`
	DnsMode         DNSMode        `protobuf:"varint,8,opt,name=dns_mode,json=dnsMode,proto3,enum=clash.v1.DNSMode" json:"dns_mode,omitempty"`
	ProcessPath     string         `protobuf:"bytes,9,opt,name=process_path,json=processPath,proto3" json:"process_path,omitempty"`
	SpecialProxy    string         `protobuf:"bytes,10,opt,name=special_proxy,json=specialProxy,proto3" json:"special_proxy,omitempty"`
}

func (x *SubscribeConnectionsResponse_Metadata) Reset() {
	*x = SubscribeConnectionsResponse_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeConnectionsResponse_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeConnectionsResponse_Metadata) ProtoMessage() {}

func (x *SubscribeConnectionsResponse_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeConnectionsResponse_Metadata.ProtoReflect.Descriptor instead.
func (*SubscribeConnectionsResponse_Metadata) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{8, 0}
}

func (x *SubscribeConnectionsResponse_Metadata) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *SubscribeConnectionsResponse_Metadata) GetType() ConnectionType {
	if x != nil {
		return x.Type
	}
	return ConnectionType_CONNECTION_TYPE_UNSPECIFIED
}

func (x *SubscribeConnectionsResponse_Metadata) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *SubscribeConnectionsResponse_Metadata) GetDestinationIp() string {
	if x != nil {
		return x.DestinationIp
	}
	return ""
}

func (x *SubscribeConnectionsResponse_Metadata) GetSourcePort() int64 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *SubscribeConnectionsResponse_Metadata) GetDestinationPort() int64 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *SubscribeConnectionsResponse_Metadata) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SubscribeConnectionsResponse_Metadata) GetDnsMode() DNSMode {
	if x != nil {
		return x.DnsMode
	}
	return DNSMode_DNS_MODE_UNSPECIFIED
}

func (x *SubscribeConnectionsResponse_Metadata) GetProcessPath() string {
	if x != nil {
		return x.ProcessPath
	}
	return ""
}

func (x *SubscribeConnectionsResponse_Metadata) GetSpecialProxy() string {
	if x != nil {
		return x.SpecialProxy
	}
	return ""
}

type SubscribeConnectionsResponse_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SubscribeConnectionsResponse_Rule) Reset() {
	*x = SubscribeConnectionsResponse_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeConnectionsResponse_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeConnectionsResponse_Rule) ProtoMessage() {}

func (x *SubscribeConnectionsResponse_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeConnectionsResponse_Rule.ProtoReflect.Descriptor instead.
func (*SubscribeConnectionsResponse_Rule) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{8, 1}
}

func (x *SubscribeConnectionsResponse_Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubscribeConnectionsResponse_Rule) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type SubscribeConnectionsResponse_Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata      *SubscribeConnectionsResponse_Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	UploadTotal   int64                                  `protobuf:"varint,3,opt,name=upload_total,json=uploadTotal,proto3" json:"upload_total,omitempty"`
	DownloadTotal int64                                  `protobuf:"varint,4,opt,name=download_total,json=downloadTotal,proto3" json:"download_total,omitempty"`
	StartTime     *timestamppb.Timestamp                 `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Chains        []string                               `protobuf:"bytes,6,rep,name=chains,proto3" json:"chains,omitempty"`
	Rules         *SubscribeConnectionsResponse_Rule     `protobuf:"bytes,7,opt,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SubscribeConnectionsResponse_Connection) Reset() {
	*x = SubscribeConnectionsResponse_Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeConnectionsResponse_Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeConnectionsResponse_Connection) ProtoMessage() {}

func (x *SubscribeConnectionsResponse_Connection) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeConnectionsResponse_Connection.ProtoReflect.Descriptor instead.
func (*SubscribeConnectionsResponse_Connection) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{8, 2}
}

func (x *SubscribeConnectionsResponse_Connection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubscribeConnectionsResponse_Connection) GetMetadata() *SubscribeConnectionsResponse_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubscribeConnectionsResponse_Connection) GetUploadTotal() int64 {
	if x != nil {
		return x.UploadTotal
	}
	return 0
}

func (x *SubscribeConnectionsResponse_Connection) GetDownloadTotal() int64 {
	if x != nil {
		return x.DownloadTotal
	}
	return 0
}

func (x *SubscribeConnectionsResponse_Connection) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SubscribeConnectionsResponse_Connection) GetChains() []string {
	if x != nil {
		return x.Chains
	}
	return nil
}

func (x *SubscribeConnectionsResponse_Connection) GetRules() *SubscribeConnectionsResponse_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type QueryDNSResponse_Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Class int32  `protobuf:"varint,3,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *QueryDNSResponse_Question) Reset() {
	*x = QueryDNSResponse_Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDNSResponse_Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDNSResponse_Question) ProtoMessage() {}

func (x *QueryDNSResponse_Question) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDNSResponse_Question.ProtoReflect.Descriptor instead.
func (*QueryDNSResponse_Question) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{11, 0}
}

func (x *QueryDNSResponse_Question) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryDNSResponse_Question) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *QueryDNSResponse_Question) GetClass() int32 {
	if x != nil {
		return x.Class
	}
	return 0
}

type QueryDNSResponse_Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Ttl  int64  `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Data string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryDNSResponse_Answer) Reset() {
	*x = QueryDNSResponse_Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clash_v1_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDNSResponse_Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDNSResponse_Answer) ProtoMessage() {}

func (x *QueryDNSResponse_Answer) ProtoReflect() protoreflect.Message {
	mi := &file_clash_v1_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDNSResponse_Answer.ProtoReflect.Descriptor instead.
func (*QueryDNSResponse_Answer) Descriptor() ([]byte, []int) {
	return file_clash_v1_service_proto_rawDescGZIP(), []int{11, 1}
}

func (x *QueryDNSResponse_Answer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryDNSResponse_Answer) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *QueryDNSResponse_Answer) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *QueryDNSResponse_Answer) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_clash_v1_service_proto protoreflect.FileDescriptor

var file_clash_v1_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x0f, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x25, 0x0a, 0x09, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x2d, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x6f, 0x77, 0x6e,
	0x22, 0x97, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x4a,
	0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x08, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0x40, 0x0a, 0x07, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69,
	0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x1a, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x61,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x08, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x1a, 0x40, 0x0a, 0x07, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x54, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0xae, 0x07, 0x0a, 0x1c, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x53, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6c, 0x61,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xec, 0x02, 0x0a, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x4e, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x1a, 0x34, 0x0a, 0x04, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0xc9, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xe1, 0x04, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x1a, 0x48, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0x56, 0x0a,
	0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x74,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x77, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x44,
	0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x43,
	0x50, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55,
	0x44, 0x50, 0x10, 0x02, 0x2a, 0xf8, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x54, 0x54, 0x50,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x53, 0x34, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x53, 0x35, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x44, 0x49, 0x52, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x50, 0x52, 0x4f, 0x58,
	0x59, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x07, 0x2a,
	0x64, 0x0a, 0x07, 0x44, 0x4e, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4e,
	0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x4e, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4e, 0x53,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x4b, 0x45, 0x5f, 0x49, 0x50, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x44, 0x4e, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x50,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x32, 0xf7, 0x05, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x73, 0x68, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x30, 0x01, 0x12, 0x40,
	0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x63, 0x6c,
	0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x30, 0x01,
	0x12, 0x67, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x63,
	0x6c, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x63,
	0x6c, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x61,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x08,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x12, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x8e, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x72, 0x65,
	0x61, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x43, 0x6c, 0x61, 0x73, 0x68, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x08, 0x43, 0x6c, 0x61, 0x73, 0x68, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14,
	0x43, 0x6c, 0x61, 0x73, 0x68, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x68, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clash_v1_service_proto_rawDescOnce sync.Once
	file_clash_v1_service_proto_rawDescData = file_clash_v1_service_proto_rawDesc
)

func file_clash_v1_service_proto_rawDescGZIP() []byte {
	file_clash_v1_service_proto_rawDescOnce.Do(func() {
		file_clash_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_clash_v1_service_proto_rawDescData)
	})
	return file_clash_v1_service_proto_rawDescData
}

var file_clash_v1_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_clash_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_clash_v1_service_proto_goTypes = []interface{}{
	(LogLevel)(0),                                   // 0: clash.v1.LogLevel
	(Network)(0),                                    // 1: clash.v1.Network
	(ConnectionType)(0),                             // 2: clash.v1.ConnectionType
	(DNSMode)(0),                                    // 3: clash.v1.DNSMode
	(*VersionResponse)(nil),                         // 4: clash.v1.VersionResponse
	(*SubscribeLogsRequest)(nil),                    // 5: clash.v1.SubscribeLogsRequest
	(*LogRecord)(nil),                               // 6: clash.v1.LogRecord
	(*Traffic)(nil),                                 // 7: clash.v1.Traffic
	(*ListRulesResponse)(nil),                       // 8: clash.v1.ListRulesResponse
	(*ListInboundsResponse)(nil),                    // 9: clash.v1.ListInboundsResponse
	(*BatchUpdateInboundsRequest)(nil),              // 10: clash.v1.BatchUpdateInboundsRequest
	(*SubscribeConnectionsRequest)(nil),             // 11: clash.v1.SubscribeConnectionsRequest
	(*SubscribeConnectionsResponse)(nil),            // 12: clash.v1.SubscribeConnectionsResponse
	(*DeleteConnectionRequest)(nil),                 // 13: clash.v1.DeleteConnectionRequest
	(*QueryDNSRequest)(nil),                         // 14: clash.v1.QueryDNSRequest
	(*QueryDNSResponse)(nil),                        // 15: clash.v1.QueryDNSResponse
	(*ListRulesResponse_Rule)(nil),                  // 16: clash.v1.ListRulesResponse.Rule
	(*ListInboundsResponse_Inbound)(nil),            // 17: clash.v1.ListInboundsResponse.Inbound
	(*BatchUpdateInboundsRequest_Inbound)(nil),      // 18: clash.v1.BatchUpdateInboundsRequest.Inbound
	(*SubscribeConnectionsResponse_Metadata)(nil),   // 19: clash.v1.SubscribeConnectionsResponse.Metadata
	(*SubscribeConnectionsResponse_Rule)(nil),       // 20: clash.v1.SubscribeConnectionsResponse.Rule
	(*SubscribeConnectionsResponse_Connection)(nil), // 21: clash.v1.SubscribeConnectionsResponse.Connection
	(*QueryDNSResponse_Question)(nil),               // 22: clash.v1.QueryDNSResponse.Question
	(*QueryDNSResponse_Answer)(nil),                 // 23: clash.v1.QueryDNSResponse.Answer
	(*durationpb.Duration)(nil),                     // 24: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                   // 25: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                           // 26: google.protobuf.Empty
}
var file_clash_v1_service_proto_depIdxs = []int32{
	0,  // 0: clash.v1.SubscribeLogsRequest.level:type_name -> clash.v1.LogLevel
	16, // 1: clash.v1.ListRulesResponse.rules:type_name -> clash.v1.ListRulesResponse.Rule
	17, // 2: clash.v1.ListInboundsResponse.inbounds:type_name -> clash.v1.ListInboundsResponse.Inbound
	18, // 3: clash.v1.BatchUpdateInboundsRequest.inbounds:type_name -> clash.v1.BatchUpdateInboundsRequest.Inbound
	24, // 4: clash.v1.SubscribeConnectionsRequest.internal:type_name -> google.protobuf.Duration
	21, // 5: clash.v1.SubscribeConnectionsResponse.connections:type_name -> clash.v1.SubscribeConnectionsResponse.Connection
	22, // 6: clash.v1.QueryDNSResponse.question:type_name -> clash.v1.QueryDNSResponse.Question
	23, // 7: clash.v1.QueryDNSResponse.answer:type_name -> clash.v1.QueryDNSResponse.Answer
	23, // 8: clash.v1.QueryDNSResponse.authority:type_name -> clash.v1.QueryDNSResponse.Answer
	2,  // 9: clash.v1.SubscribeConnectionsResponse.Metadata.type:type_name -> clash.v1.ConnectionType
	3,  // 10: clash.v1.SubscribeConnectionsResponse.Metadata.dns_mode:type_name -> clash.v1.DNSMode
	19, // 11: clash.v1.SubscribeConnectionsResponse.Connection.metadata:type_name -> clash.v1.SubscribeConnectionsResponse.Metadata
	25, // 12: clash.v1.SubscribeConnectionsResponse.Connection.start_time:type_name -> google.protobuf.Timestamp
	20, // 13: clash.v1.SubscribeConnectionsResponse.Connection.rules:type_name -> clash.v1.SubscribeConnectionsResponse.Rule
	5,  // 14: clash.v1.ClashService.SubscribeLogs:input_type -> clash.v1.SubscribeLogsRequest
	26, // 15: clash.v1.ClashService.SubscribeTraffics:input_type -> google.protobuf.Empty
	11, // 16: clash.v1.ClashService.SubscribeConnections:input_type -> clash.v1.SubscribeConnectionsRequest
	26, // 17: clash.v1.ClashService.Version:input_type -> google.protobuf.Empty
	26, // 18: clash.v1.ClashService.ListRules:input_type -> google.protobuf.Empty
	26, // 19: clash.v1.ClashService.ListInbounds:input_type -> google.protobuf.Empty
	10, // 20: clash.v1.ClashService.BatchUpdateInbounds:input_type -> clash.v1.BatchUpdateInboundsRequest
	13, // 21: clash.v1.ClashService.DeleteConnection:input_type -> clash.v1.DeleteConnectionRequest
	26, // 22: clash.v1.ClashService.CloseAllConnections:input_type -> google.protobuf.Empty
	14, // 23: clash.v1.ClashService.QueryDNS:input_type -> clash.v1.QueryDNSRequest
	6,  // 24: clash.v1.ClashService.SubscribeLogs:output_type -> clash.v1.LogRecord
	7,  // 25: clash.v1.ClashService.SubscribeTraffics:output_type -> clash.v1.Traffic
	12, // 26: clash.v1.ClashService.SubscribeConnections:output_type -> clash.v1.SubscribeConnectionsResponse
	4,  // 27: clash.v1.ClashService.Version:output_type -> clash.v1.VersionResponse
	8,  // 28: clash.v1.ClashService.ListRules:output_type -> clash.v1.ListRulesResponse
	9,  // 29: clash.v1.ClashService.ListInbounds:output_type -> clash.v1.ListInboundsResponse
	26, // 30: clash.v1.ClashService.BatchUpdateInbounds:output_type -> google.protobuf.Empty
	26, // 31: clash.v1.ClashService.DeleteConnection:output_type -> google.protobuf.Empty
	26, // 32: clash.v1.ClashService.CloseAllConnections:output_type -> google.protobuf.Empty
	15, // 33: clash.v1.ClashService.QueryDNS:output_type -> clash.v1.QueryDNSResponse
	24, // [24:34] is the sub-list for method output_type
	14, // [14:24] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_clash_v1_service_proto_init() }
func file_clash_v1_service_proto_init() {
	if File_clash_v1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clash_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Traffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInboundsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateInboundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDNSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDNSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRulesResponse_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInboundsResponse_Inbound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateInboundsRequest_Inbound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeConnectionsResponse_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeConnectionsResponse_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeConnectionsResponse_Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDNSResponse_Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clash_v1_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDNSResponse_Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clash_v1_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_clash_v1_service_proto_goTypes,
		DependencyIndexes: file_clash_v1_service_proto_depIdxs,
		EnumInfos:         file_clash_v1_service_proto_enumTypes,
		MessageInfos:      file_clash_v1_service_proto_msgTypes,
	}.Build()
	File_clash_v1_service_proto = out.File
	file_clash_v1_service_proto_rawDesc = nil
	file_clash_v1_service_proto_goTypes = nil
	file_clash_v1_service_proto_depIdxs = nil
}
